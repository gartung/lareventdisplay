#include "evdservices_microboone.fcl"
##include "trackfindermodules_microboone.fcl"
#include "particleid.fcl"
#include "cluster_microboone.fcl"
#include "showerfindermodules_noinclude_microboone.fcl"

process_name: EVD

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "cosmics_hist.root" closeFileFast: false }
  Timing:       {}
  RandomNumberGenerator: {} #ART native random number generator
  message:      @local::evd_message
  user:         @local::microboone_disp
}

# Define the services

#Look at the input files
source:
{
  module_type: RootInput
  fileNames:  [ "data.root" ]
  maxEvents:   -1       # Number of events to create
  #inputCommands:["keep*","drop sim::PMTHits_*_*_*"]
}

outputs:{}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers: 
 {
 graph: @local::microboone_graphcluster
 showeranglecluster: @local::microboone_showeranglecluster
 showerreco: @local::microboone_shower
 }

 filters:{}

 analyzers:
 {
  evdisp:{module_type: EVD}

 }
 
 #list the modules for this path, order matters, filters reject all following items
 evd: [ evdisp ] 
 recopath: [graph,showeranglecluster,showerreco]
 #recopath: [graph]
  #recopath: [graph,spacepts, calo ,pid]
 #end_path are things that do not modify art::Event, includes analyzers 
 #and output modules. all items here can be run simultaneously
 trigger_paths: [recopath]
 end_paths: [evd]  
}
services.user.EvdLayoutOptions.ShowSideBar:		1
services.user.EvdLayoutOptions.ShowClusterSection:      1
services.user.EvdLayoutOptions.ChangeWire:		1
services.user.RecoDrawingOptions.ClusterModuleLabels:	["graph"]
services.user.AnalysisDrawingOptions.CalorimetryModuleLabels: ["showerreco"]
services.user.RecoDrawingOptions.DrawClusters: 		1
physics.producers.showeranglecluster.ClusterModuleLabel:       "graph"
physics.producers.spacepts.ClusterModuleLabel:		       "graph"
