#include "services_dune.fcl"
#include "caldata_dune.fcl"
#include "hitfindermodules_dune.fcl"
#include "cluster_dune.fcl"
#include "trackfindermodules_dune.fcl"
#include "pandoramodules_dune.fcl"
#include "calorimetry_dune10kt.fcl"
#include "mctrutht0matching.fcl"
#include "t0reco.fcl"
#include "opticaldetectormodules_dune.fcl"
#include "trackshowerhits.fcl"
#include "showerfindermodules_dune.fcl"
#include "emshower3d.fcl"
#include "evdservices_dune.fcl"

process_name: Landed

services:
{
  # Load the service that manages root files for histograms.
  MemoryTracker:     {}
  TimeTracker:       {}
  RandomNumberGenerator: {} #ART native random number generator
  message:              @local::dune_message_services_prod_debug
  FileCatalogMetadata:  @local::art_file_catalog_mc
                        @table::dunefd_simulation_services

  LandedSocket: {}
 ExptGeoHelperInterface:   @local::dune_geometry_helper
  Geometry:                 @local::dune10kt_geo
  MagneticField:                  @local::no_mag_larsoft

}
#source is now a root file
source:
{
  module_type: RootInput
#  fileNames:  [ "/data/robinson/musun/1548673/1548673.111/nodaq.root" ] 
  maxEvents:   -1       # Number of events to create
  #firstEvent: 1110994                                                         
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{
 
    analyzers:
        {
        evdisp:{module_type: Landed
                #which: "truth"    #truth for mc truth, or reco name for reconstruction
                outputFilename: "eventdisplayfile.eddb"  #omit to use socket
                #events: [ 1, 5, 9 ]   #filter to select certain events
                }
 }


 display: [ evdisp ]

 #define the output stream, there could be more than one if using filters 
 #stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 
 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [display]  
}

