//Implementation of a GUI to edit fhicl parameter sets from with the EVE-based event display
//The ability to make new parameters sets and change the list of modules to be run may be added later
//aoliv23@lsu.edu

//Event display includes
#include "EveDisplay/EvePSetGui.h"
#include "EventDisplayBase/ParameterSetEdit.h"

//ROOT includes
#include "TGFrame.h"
#include "TEveBrowser.h"
#include "TGListTree.h"
#include "TGTextEntry.h"
#include "TGLabel.h"

#ifndef __CINT__

//If you get problems about cwchar.h when trying to build this, you need ifndef __CINT__ around some or all of your ART/FHICL includes because of BOOST

//Framework includes
#include "fhiclcpp/parse.h"
#include "fhiclcpp/intermediate_table.h"
#include "fhiclcpp/make_ParameterSet.h"
#include "fhiclcpp/ParameterSetRegistry.h"
#include "art/Framework/Services/Registry/ServiceRegistry.h"

#endif

void eved::EvePSetGui::AddTreeItem(TGListTreeItemStd* parent, std::string name, fhicl::ParameterSet p)
{
  TGListTreeItemStd* pset = fListTree->AddItem(parent, name.c_str()); //just feed the pset ID to this function when it is first called
  pset->SetUserData(&p);

  std::vector<std::string> keys(p.get_names()); //used deprecated get_keys() before
  for(const auto& key:keys)
  {
    if(p.is_key_to_table(key)) AddTreeItem(pset, key, &p.get<fhicl::ParameterSet>(key));
    else 
    {
      fListTree->AddItem(pset, key.c_str())->SetUserData(p.get<std::string>(key));
    }
  }
}



eved::EvePSetGui::EvePSetGui(TEveBrowser* browse, std::vector<ui::UserInteraction::ModuleInfo> const & workers)
{
  browse->StartEmbedding(TRootBrowser::kLeft);
  fListTree = new TGListTree(browse);
  fParamText = new TGTextEntry(browse, new TGTextBuffer());
  fParamLabel = new TGLabel(browse, "VOID");

  browse->AddFrame(fParamText);
  browse->AddFrame(fParamLabel);
  
  //Set up list tree
  //Workers (modules like producers, filters, and analyzers)
  /*fListTree->AddRoot("Workers");
  TGListTreeItem* workerRoot = fListTree->FindItemByPathname("Workers");*/
  for(size_t wIt = 0; wIt < workers.size(); ++wIt)
  {
    auto pset = workers[wIt].pset;
    AddTreeItem(workers[wIt].label, pset.id().to_string(), pset); //check this line
  }

  //Services
  art::ServiceRegistry& inst = art::ServiceRegistry::instance();
  std::vector<fhicl::ParameterSet> psets;
  inst.presentToken().getParameterSets(psets);
  /*fListTree->AddRoot("Services");
  TGListTreeItem* serviceRoot = fListTree->FindItemByPathname("Services");*/
  for(const auto& pset:psets)
  {
    AddTreeItem(nullptr, pset.id().to_string(), &pset); //serviceRoot, pset);
  }
  
  browse->AddFrame(fListTree);

  browse->MapSubwindows();
  browse->Resize();
  browse->MapWindow();
  
  browse->StopEmbedding();
  browse->SetTabTitle("PSet Editor", 1);
}

void eved::EvePSetGui::Clicked(TGListTreeItemStd* item, Int_t i)
{
  if(item != nullptr)
  {
    if(item->GetParent() != nullptr)
    {
      std::string name(item->GetText()); //GetString();  

      fhicl::ParameterSet pset(reinterpret_cast<fhicl::ParameterSet>(item->GetParent()->GetUserData())); //reinterpret_cast is really dangerous, so we should 
                                                                                                         //make our own list tree object instead if you find 
                                                                                                         //this. 
      if(pset.is_key_to_table(name)) return;
      fParamLabel->SetText(name.c_str());
      fParamText->SetText(reinterpret_cast<std::string>(item->GetUserData()).c_str()); //now figure out how to get this value back into the parameter set
    }
  }
}

fhicl::ParameterSet eved::EvePSetGui::GetPSet(std::string name)
{
  TGListTreeItemStd* base = fListTree->FindItemByPathname(name.c_str());
  if(base == nullptr) return;
  fhicl::ParameterSet returnVal = *reinterpret_cast<fhicl::ParameterSet>(base->GetUserData());

  TGListTreeItemStd* first = base->GetFirstChild(), last = base->GetLastChild();

  for(TGListTreeItemStd* child = first; child != last; child = child->GetNextSibling) //loop over children of base, "put"ing values into returnVal and recusively calling this function for psets
  {
    std::string key = child->GetText();
    if(returnVal.is_key_of_pset(key)) returnVal.put(key, GetPSet(key));
    else returnVal.put_or_replace(key, *reinterpret_cast<std::string>(child->GetUserData())); //what if we added a new pset?
  }
  std::string key = last->GetText();
  if(returnVal.is_key_of_pset(key)) returnVal.put(key, GetPSet(key));
  else returnVal.put_or_replace(key, *reinterpret_cast<std::string>(child->GetUserData())); //what if we added a new pset?
  
  return returnVal;
}

void eved::EvePSetGui::Update(std::vector<ui::UserInteraction::ModuleInfo> const& infoList)
{
  //Update PSets for workers
  for(const auto& info:infoList)
  {
    auto wpset = GetPSet(info.pset.id().to_string().c_str());
    info.pset = wpset;
  }

  //Update PSets for services
  art::ServiceRegistry& inst = art::ServiceRegistry::instance();
  std::vector<fhicl::ParameterSet> psets;
  inst.presentToken().getParameterSets(psets);
  for(const auto& pset:psets)
  {
    auto spset = GetPSet(pset.id().to_string().c_str());
    pset = spset; //does this actually update the pset?  I don't think so, but I'll try to be sure
  }
}

eved::EvePSetGui::~EvePSetGui()
{
  if(fParamText != nullptr) { delete fParamText; fParamText = nullptr; }
  if(fParamLabel != nullptr) { delete fParamLabel; fParamLabel = nullptr; }
}
