// \file: TWQScene.h
// \brief: Constructs a scene for the EVE-based event display by projecting all elements into time-wire space
// \author: Andrew Olivier aolivier@ur.rochester.edu

//Framework includes
#include "fhiclcpp/ParameterSet.h"
#include "cetlib/exception.h"
#include "messagefacility/MessageLogger/MessageLogger.h"
#include "art/Framework/Services/Registry/ServiceHandle.h"
#include "art/Framework/Core/EDAnalyzer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "art/Persistency/Common/Ptr.h"
#include "art/Persistency/Common/PtrVector.h"
#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"

//LArSoft includes
#include "lareventdisplay/EveDisplay/GUI/EveDisplay.h"
#include "lareventdisplay/EveDisplay/Util/TEveUserProjectionManager.h" 
#include "lareventdisplay/EveDisplay/Util/TEveTWQProjection.h" //neither of these two includes seems to be the source of the '}' error
#include "larcore/Geometry/Geometry.h"

//ROOT includes
#include "TEveScene.h"

#ifndef EVED_TWQSCENE_MODULE_CC
#define EVED_TWQSCENE_MODULE_CC

namespace
{
  void DestroyRecursive(TEveElement* el)
  { 
    for(auto child = el->BeginChildren(); child != el->EndChildren(); ++child)
    { 
      DestroyRecursive(*child);
    }
    el->DestroyElements();
    return;
  }
}

namespace eved
{
  class TWQScene: public art::EDAnalyzer
  {
    public:
      // The destructor generated by the compiler is fine for classes
      // without bare pointers or other resource use.
      
      // Plugins should not be copied or assigned.
      TWQScene(TWQScene const &) = delete;
      TWQScene(TWQScene &&) = delete;
      TWQScene & operator = (TWQScene const &) = delete;
      TWQScene & operator = (TWQScene &&) = delete;

      explicit TWQScene(fhicl::ParameterSet const& p);

      virtual void beginJob() override;
      virtual void analyze(const art::Event&) override;
      virtual void reconfigure(fhicl::ParameterSet const& p) override;

    private:
      std::string fSceneName; //The name of the TEveScene we will look for and try to project
      std::vector<std::pair<vutl::TEveUserProjectionManager*, TEveScene*>> fPManPairs;
      std::vector<vutl::TEveTWQProjection*> fProjs;
  };
}

  eved::TWQScene::TWQScene(fhicl::ParameterSet const& p): EDAnalyzer(p)//, fProjScene(nullptr)
  {
    reconfigure(p);  

    art::ServiceHandle<geo::Geometry> geom;
    
    for(const auto& id: geom->IteratePlaneIDs())
    {
      fProjs.emplace_back(new vutl::TEveTWQProjection(id));
      fPManPairs.emplace_back(new vutl::TEveUserProjectionManager(fProjs.back()), nullptr);
    }
  }

  void eved::TWQScene::reconfigure(fhicl::ParameterSet const& p)
  {
    fSceneName = p.get<std::string>("SceneName");
  }

  void eved::TWQScene::beginJob()
  {
    auto toBeProj = dynamic_cast<TEveScene*>(art::ServiceHandle<eved::EveDisplay>()->getEve()->GetScenes()->FindChild(TString(fSceneName.c_str())));
    if(toBeProj == nullptr) //If we failed to find the scene we wanted
    {
      throw cet::exception("BadSceneName") << "Could not find scene with name " << fSceneName << ".\n";
    }

    for(const auto& pair: fPManPairs)
    {
      //pair.second = pair.first->ImportElements(toBeProj, nullptr);
      pair.first->ImportElements(toBeProj, pair.second);
    }
  }

  void eved::TWQScene::analyze(const art::Event& /*e*/)
  {
    auto toBeProj = dynamic_cast<TEveScene*>(art::ServiceHandle<eved::EveDisplay>()->getEve()->GetScenes()->FindChild(TString(fSceneName.c_str())));
    if(toBeProj == nullptr) //If we failed to find the scene we wanted
    {
      throw cet::exception("BadSceneName") << "Could not find scene with name " << fSceneName << ".\n";
    } //Do I have to worry about someone deleting this?  

    for(const auto& pair: fPManPairs)
    {
      auto scene = pair.second;
      ::DestroyRecursive(scene);
      pair.first->ImportElements(toBeProj, scene);
    } 
  }

DEFINE_ART_MODULE(eved::TWQScene)

#endif
