////////////////////////////////////////////////////////////////////////
// Class:       OrthoCopyViewerMaker
// Module Type: analyzer
// File:        OrthoCopyViewerMaker_module.cc
// Brief:       Module to make an orthographic viewer using projections of preexisting TEveScenes.
//
// Generated at Tue May 17 13:33:55 2016 by Andrew Olivier using artmod
// from cetpkgsupport v1_10_01.
////////////////////////////////////////////////////////////////////////

//Framework includes
#include "art/Framework/Core/EDAnalyzer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"
#include "art/Persistency/Common/Ptr.h"
#include "art/Persistency/Common/PtrVector.h"
#include "cetlib/exception.h"

//LArSoft includes
#include "lareventdisplay/EveDisplay/GUI/EveDisplay.h"
#include "lareventdisplay/EveDisplay/Algs/AlgHolder.h"

//ROOT includes
#include "TEveViewer.h"
#include "TEveScene.h"
#include "TEveTrack.h"
#include "TEvePathMark.h"
#include "TVector3.h"
#include "TEveVector.h"
#include "TGLViewer.h"
#include "TEveProjections.h"
#include "TEveProjectionAxes.h"
#include "TEveProjectionManager.h"
#include "TGLViewer.h"

//c++ includes
#include <memory>

namespace eved {
  class OrthoCopyViewerMaker;
}

class eved::OrthoCopyViewerMaker : public art::EDAnalyzer
{
  public:
    explicit OrthoCopyViewerMaker(fhicl::ParameterSet const & p);
    // The destructor generated by the compiler is fine for classes
    // without bare pointers or other resource use.
  
    // Plugins should not be copied or assigned.
    OrthoCopyViewerMaker(OrthoCopyViewerMaker const &) = delete;
    OrthoCopyViewerMaker(OrthoCopyViewerMaker &&) = delete;
    OrthoCopyViewerMaker & operator = (OrthoCopyViewerMaker const &) = delete;
    OrthoCopyViewerMaker & operator = (OrthoCopyViewerMaker &&) = delete;
  
    // Required functions.
    void analyze(art::Event const & e) override;
  
    // Selected optional functions.
    void beginJob() override;
    void beginRun(art::Run const & r) override;
    void beginSubRun(art::SubRun const & sr) override;
    void endJob() override;
    void endRun(art::Run const & r) override;
    void endSubRun(art::SubRun const & sr) override;
    void reconfigure(fhicl::ParameterSet const & p) override;
    void respondToCloseInputFile(art::FileBlock const & fb) override;
    void respondToCloseOutputFiles(art::FileBlock const & fb) override;
    void respondToOpenInputFile(art::FileBlock const & fb) override;
    void respondToOpenOutputFiles(art::FileBlock const & fb) override;
  
  private:
  
    // Declare member data here.
    std::vector<std::string> fSceneNames; //The names of TEveScenes we will attempt to "borrow".  
    TEveViewer* fViewer; //The Viewer that controls the actual window
    TEveSceneList* fScenes; //The TEveScenes we will "borrow"
    TEveProjectionManager* fMan;
    //TEveProjectionAxes*    fAxes;
  
};

eved::OrthoCopyViewerMaker::OrthoCopyViewerMaker(fhicl::ParameterSet const & p)
  :
  EDAnalyzer(p), fViewer(nullptr), fMan(nullptr)
 // More initializers here.
{
  fViewer = art::ServiceHandle<eved::EveDisplay>()->getEve()->SpawnNewViewer("Ortho");
  fViewer->GetGLViewer()->SetCurrentCamera(TGLViewer::kCameraOrthoXOY); //Set the camera to orthographic mode for this view
  fMan = new TEveProjectionManager(TEveProjection::kPT_RPhi);
  reconfigure(p);
}

void eved::OrthoCopyViewerMaker::analyze(art::Event const & e)
{
  fViewer->GetGLViewer()->DeleteOverlayAnnotations();
  fViewer->RemoveElementsLocal(); //Remove our old projected scenes.  

  auto eve = art::ServiceHandle<eved::EveDisplay>()->getEve();
  auto list = eve->GetViewers(); 

  //Add the viewers requrested by the user.
  for(const auto& name: fSceneNames)
  {
    auto found = list->FindChild(name.c_str());
    if(found == nullptr) throw cet::exception("FailedSceneCopy") << "Failed to get TEveScene named " << name << " from TEveManager.\n";
    /*auto projected =*/ fMan->ImportElements(found, fViewer); //add a projected version of this scene to the viewer
    //This module MUST be run after the module that creates the scenes we copy. I thought we couldn't transfer information between modules using services, 
    //but trying this to find out since I think it would be much more efficient.  
    //Do we need a VizDB_Insert call for each projected element?    
  }

  // Implementation of required member function here.
  mf::LogWarning("OrthoCopyViewerMaker") << "Making scenes in OrthoCopyViewerMaker.\n";
}

void eved::OrthoCopyViewerMaker::beginJob()
{
  // Implementation of optional member function here.
  auto glview = fViewer->GetGLViewer(); //Temporary set up of GLViewer.  This should be fcl-controlled in the future...
  glview->UseLightColorSet();
  glview->SetGuideState(TGLUtil::kAxesEdge, kTRUE, kFALSE, 0);
  glview->PreferLocalFrame();
}

void eved::OrthoCopyViewerMaker::beginRun(art::Run const & r)
{
  // Implementation of optional member function here.
}

void eved::OrthoCopyViewerMaker::beginSubRun(art::SubRun const & sr)
{
  // Implementation of optional member function here.
  //fViewer->AddElement(fAxes); //Need to find a way to get these into each view
}

void eved::OrthoCopyViewerMaker::endJob()
{
  // Implementation of optional member function here.
}

void eved::OrthoCopyViewerMaker::endRun(art::Run const & r)
{
  // Implementation of optional member function here.
}

void eved::OrthoCopyViewerMaker::endSubRun(art::SubRun const & sr)
{
  // Implementation of optional member function here.
}

void eved::OrthoCopyViewerMaker::reconfigure(fhicl::ParameterSet const & p)
{
  // Implementation of optional member function here.
  fSceneNames  = p.get<std::vector<std::string>>("SceneNames"); 
  //List of names of TEveScenes we will try to "borrow".  If we fail, ROOT will return a warning (which 
  //usually crashes an ART job).
}

void eved::OrthoCopyViewerMaker::respondToCloseInputFile(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}

void eved::OrthoCopyViewerMaker::respondToCloseOutputFiles(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}

void eved::OrthoCopyViewerMaker::respondToOpenInputFile(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}

void eved::OrthoCopyViewerMaker::respondToOpenOutputFiles(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}

DEFINE_ART_MODULE(eved::OrthoCopyViewerMaker)
