////////////////////////////////////////////////////////////////////////
// Class:       StaticEveAlgs
// Module Type: analyzer
// File:        StaticEveAlgs_module.cc
// Author:      Andrew Olivier andrew@djoinc.com
// Brief:       Runs algorithms that make Eve visualization objects for the event display
//
// Generated at Sat Apr 23 19:13:37 2016 by Andrew Olivier using artmod
// from cetpkgsupport v1_10_01.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDAnalyzer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"

#ifndef EVED_STATICEVEALG_MODULE_CC
#define EVED_STATICEVEALG_MODULE_CC

namespace eved {
  class StaticEveAlgs;
}

template <T, class ...Types, class Tuple>
void ApplyToTuple(Tuple tuple)
{
  T obj = std::get<sizeof...(Types)>(tuple)
  ApplyToTuple<Types>(tuple);
}

template <class ...Algs> //, class ... Scenes, class ... Viewers> 

//First template parameter: list of algorithms
//Algorithms are classes that:
//*may configure themselves from parameter sets
//*map LArSoft data products to visualization objects derived from TEveElement (ROOT)
//
//Algorithms must have the following functions:
//* /*Optional*/ Initialize() //perform initialization 
//* /*Optional*/ Reconfigure(fhicl::ParameterSet const& pset) //reconfigure this algorithm given a parameter set
//* void RequestDataProducts(art::PtrVector<data product> prodVec, std::string name) //request data products that will be "gotten" from the art::Event
//* std::vector<Eve visualization objects> MakeVis() //make and return visualization elements; visualization elements will be included in views by type
//
//Future Requirement Below?
//* std::vector<Eve visualization objects> MakeVis() //make and return visualization elements using associated data products 
//
//Fill in other algorithm requirements here!

//Rest to come later! 
//Second template parameter: list of scenes
//Scenes are classes that:
//*may configure themselves from parameter sets
//*contain groups of visualization objects that will be included together in Eve viewers
//*derive from TEveScene
//
//Scenes must have the following functions:
//* /*Optional*/ Initialize() //perform initialization 
//* /*Optional*/ Reconfigure(fhicl::ParameterSet const& pset) //reconfigure this algorithm given a parameter set
//* (Constructor)(class ... VisProds) //construct from a list a visualization products
//
//Fill in other view requirements here! 

//Third template parameter: list of viewers
//Viewers are classes that:
//*may configure themselves from parameter sets
//*create a TEveViewer that contains one or more TEveScenes
//*derive from TEveViewer
//
//Viewers must have the following functions:
//* /*Optional*/ Initialize() //perform initialization 
//* /*Optional*/ Reconfigure(fhicl::ParameterSet const& pset) //reconfigure this algorithm given a parameter set
//* (Constructor)(TEveViewer* man, class ... Scenes) //construct from a list of Scenes

class eved::StaticEveAlgs : public art::EDAnalyzer {
public:
  explicit StaticEveAlgs(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  StaticEveAlgs(StaticEveAlgs const &) = delete;
  StaticEveAlgs(StaticEveAlgs &&) = delete;
  StaticEveAlgs & operator = (StaticEveAlgs const &) = delete;
  StaticEveAlgs & operator = (StaticEveAlgs &&) = delete;

  // Required functions.
  void analyze(art::Event const & e) override;

  // Selected optional functions.
  void beginJob() override;
  void beginRun(art::Run const & r) override;
  void beginSubRun(art::SubRun const & sr) override;
  void endJob() override;
  void endRun(art::Run const & r) override;
  void endSubRun(art::SubRun const & sr) override;
  void reconfigure(fhicl::ParameterSet const & p) override;
  void respondToCloseInputFile(art::FileBlock const & fb) override;
  void respondToCloseOutputFiles(art::FileBlock const & fb) override;
  void respondToOpenInputFile(art::FileBlock const & fb) override;
  void respondToOpenOutputFiles(art::FileBlock const & fb) override;

private:

  // Declare private functions here.

  // Declare member data here.
  std::tuple<Algs...> fAlgs; //tuple of data product visualization algorithms

};

eved::StaticEveAlgs::StaticEveAlgs(fhicl::ParameterSet const & p)
  :
  EDAnalyzer(p), fAlgs()
 // More initializers here.
{ 
}

void eved::StaticEveAlgs::analyze(art::Event const & e)
{
  // Implementation of required member function here.
}

void eved::StaticEveAlgs::beginJob()
{
  // Implementation of optional member function here.
  
}

void eved::StaticEveAlgs::beginRun(art::Run const & r)
{
  // Implementation of optional member function here.
}

void eved::StaticEveAlgs::beginSubRun(art::SubRun const & sr)
{
  // Implementation of optional member function here.
}

void eved::StaticEveAlgs::endJob()
{
  // Implementation of optional member function here.
}

void eved::StaticEveAlgs::endRun(art::Run const & r)
{
  // Implementation of optional member function here.
}

void eved::StaticEveAlgs::endSubRun(art::SubRun const & sr)
{
  // Implementation of optional member function here.
}

void eved::StaticEveAlgs::reconfigure(fhicl::ParameterSet const & p)
{
  // Implementation of optional member function here.
}

void eved::StaticEveAlgs::respondToCloseInputFile(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}

void eved::StaticEveAlgs::respondToCloseOutputFiles(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}

void eved::StaticEveAlgs::respondToOpenInputFile(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}

void eved::StaticEveAlgs::respondToOpenOutputFiles(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}

//DEFINE_ART_MODULE(eved::StaticEveAlgs)
//This is a module template, so users need to call DEFINE_ART_MODULE(eved::StaticEveAlgs<Alg1, Alg2, View1, View2>) etc.

#endif
