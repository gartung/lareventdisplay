// \file: TrackSceneMaker.cxx
// \brief: implementation of an algorithm to make visualization objects from LArSoft's recob::Track objects
// \author: Andrew Olivier, andrew@djoinc.com
// Date: 4/24/2016

//LArSoft includes
#include "EveDisplay/VisElemMaker.h"
#include "RecoBase/Track.h"
#include "Utilities/AssociationUtil.h"

//Art includes
#include "fhiclcpp/ParameterSet.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Persistency/Common/Ptr.h"

//ROOT includes
#include "TEveTrack.h"
#include "TEveScene.h"
#include "TEvePathMark.h"
#include "TVector3.h"
#include "TEveVector.h"

//c++ includes
#include <memory>

#ifndef EVED_TRACKSCENEMAKER_MODULE_CC
#define EVED_TRACKSCENEMAKER_MODULE_CC

namespace eved {

  class TrackSceneMaker
  {
    public:
      TrackSceneMaker(fhicl::ParameterSet const& p) {} //nothing to do for the constructor yet
      ~TrackSceneMaker() {}

      TEveScene* MakeVis(const std::vector<art::Ptr<TEveTrack>> &tracks); //make a TEveTrack for each recob::Track

      void Initialize() {} //do nothing at the beginning of each job

    //private:
  };
  

  TEveScene* TrackSceneMaker::MakeVis(const std::vector<art::Ptr<TEveTrack>> &tracks) //make a TEveTrack for each recob::Track
  {

    TEveScene* retVal = new TEveScene(); //This is the TEveTrack we will return
    for(const auto& track: tracks)
    {
      TEveTrack* nc_track = new TEveTrack(*track);
      retVal->AddElement(nc_track);
    }
    return retVal;
  }
    
} //end of namespace eved

//Make the module that will produce these TEveTracks
typedef eved::VisElemMaker<eved::TrackSceneMaker, std::vector<TEveTrack>, TEveScene> VisTrackSceneMaker;
DEFINE_ART_MODULE(VisTrackSceneMaker)

#endif //EVED_TRACKMAKER_MODULE_CC
