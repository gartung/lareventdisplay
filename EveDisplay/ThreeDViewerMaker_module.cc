////////////////////////////////////////////////////////////////////////
// Class:       ThreeDViewerMaker
// Module Type: analyzer
// File:        ThreeDViewerMaker_module.cc
// author:      Andrew Olivier aoliv23@lsu.edu
// brief:       Module to create a 3D viewer for the Eve-based event display
//
// Generated at Thu May  5 15:29:39 2016 by Andrew Olivier using artmod
// from cetpkgsupport v1_10_01.
////////////////////////////////////////////////////////////////////////

//ART includes
#include "art/Framework/Core/EDAnalyzer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "art/Persistency/Common/Ptr.h"
#include "art/Persistency/Common/PtrVector.h"
#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"

//LArSoft includes
#include "EveDisplay/EveDisplay.h"

//ROOT includes
#include "TEveViewer.h"
#include "TEveScene.h"

#ifndef EVED_THREEDVIEWERMAKER_MODULE_CC
#define EVED_THREEDVIEWERMAKER_MODULE_CC

//This module takes a list of modules that produced TEveScenes, makes a TEveViewer from these scenes, and puts this viewer into the 
//a service-provided Eve event display GUI.
//Users could create more complicated viewer-making modules to add buttons or other features to their viewers.

namespace eved {
  class ThreeDViewerMaker;
}

class eved::ThreeDViewerMaker : public art::EDAnalyzer {
public:
  explicit ThreeDViewerMaker(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  ThreeDViewerMaker(ThreeDViewerMaker const &) = delete;
  ThreeDViewerMaker(ThreeDViewerMaker &&) = delete;
  ThreeDViewerMaker & operator = (ThreeDViewerMaker const &) = delete;
  ThreeDViewerMaker & operator = (ThreeDViewerMaker &&) = delete;

  // Required functions.
  void analyze(art::Event const & e) override;

  // Selected optional functions.
  void beginJob() override;
  void beginRun(art::Run const & r) override;
  void beginSubRun(art::SubRun const & sr) override;
  void endJob() override;
  void endRun(art::Run const & r) override;
  void endSubRun(art::SubRun const & sr) override;
  void reconfigure(fhicl::ParameterSet const & p) override;
  void respondToCloseInputFile(art::FileBlock const & fb) override;
  void respondToCloseOutputFiles(art::FileBlock const & fb) override;
  void respondToOpenInputFile(art::FileBlock const & fb) override;
  void respondToOpenOutputFiles(art::FileBlock const & fb) override;

private:

  // Declare member data here.
};


eved::ThreeDViewerMaker::ThreeDViewerMaker(fhicl::ParameterSet const & p)
  :
  EDAnalyzer(p)  // ,
 // More initializers here.
{
  this->reconfigure(p);
}

void eved::ThreeDViewerMaker::analyze(art::Event const & e)
{
  // Implementation of required member function here.

  TEveViewer* genViewer = art::ServiceHandle<eved::EveDisplay>()->getEve()->SpawnNewViewer(fViewerName.c_str(), fViewerName.c_str());

  for(const auto& name: fSceneNames)
  {
    art::Handle<std::vector<TEveScene>> sceneH;
    e.getByLabel(name, sceneH);

    std::vector<art::Ptr<TEveScene>> sceneV;
    art::fill_ptr_vector(sceneV, sceneH);

    for(const auto& scene: sceneV)
    {
      TEveScene* clone = (TEveScene*)(scene->Clone());
      genViewer->AddScene(clone);
    }
  }
}

void eved::ThreeDViewerMaker::beginJob()
{
  // Implementation of optional member function here.
}

void eved::ThreeDViewerMaker::beginRun(art::Run const & r)
{
  // Implementation of optional member function here.
}

void eved::ThreeDViewerMaker::beginSubRun(art::SubRun const & sr)
{
  // Implementation of optional member function here.
}

void eved::ThreeDViewerMaker::endJob()
{
  // Implementation of optional member function here.
}

void eved::ThreeDViewerMaker::endRun(art::Run const & r)
{
  // Implementation of optional member function here.
}

void eved::ThreeDViewerMaker::endSubRun(art::SubRun const & sr)
{
  // Implementation of optional member function here.
}

void eved::ThreeDViewerMaker::reconfigure(fhicl::ParameterSet const & p)
{
  // Implementation of optional member function here.
  fSceneNames = p.get<std::vector<std::string>>("SceneNames", std::vector<std::string>({""}));
  fViewerName = p.get<std::string>("ViewerName", "DEFAULT");
}

void eved::ThreeDViewerMaker::respondToCloseInputFile(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}

void eved::ThreeDViewerMaker::respondToCloseOutputFiles(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}

void eved::ThreeDViewerMaker::respondToOpenInputFile(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}

void eved::ThreeDViewerMaker::respondToOpenOutputFiles(art::FileBlock const & fb)
{
  // Implementation of optional member function here.
}

DEFINE_ART_MODULE(eved::ThreeDViewerMaker)

#endif 
